{"ast":null,"code":"var _jsxFileName = \"/Users/kristoffersmedlund/dev/hanna/quiz-app/final/src/App.js\";\nimport React, { useState } from \"react\";\nimport AvatarPicker from \"./AvatarPicker\";\nexport default function App() {\n  const questions = [{\n    questionText: \"När får man vistas på ett skjutfält\",\n    answerOptions: [{\n      answerText: \"När du blivit godkänd av verkställande officer\",\n      isCorrect: false\n    }, {\n      answerText: \"När övning ej pågär\",\n      isCorrect: true\n    }, {\n      answerText: \"Aldrig\",\n      isCorrect: false\n    }]\n  }, {\n    questionText: \"Who is CEO of Tesla?\",\n    answerOptions: [{\n      answerText: \"Jeff Bezos\",\n      isCorrect: false\n    }, {\n      answerText: \"Elon Musk\",\n      isCorrect: true\n    }, {\n      answerText: \"Bill Gates\",\n      isCorrect: false\n    }, {\n      answerText: \"Tony Stark\",\n      isCorrect: false\n    }]\n  }, {\n    questionText: \"Vad händer om du bryter mot ett tillträdelseförbud på ett skjutfält?\",\n    answerOptions: [{\n      answerText: \"Innebär livsfara och omhändertagande samt polisanmälan\",\n      isCorrect: true\n    }, {\n      answerText: \"Du får böta 10 000 SEK\",\n      isCorrect: false\n    }, {\n      answerText: \"Du får aldrig besöka närområdet igen\",\n      isCorrect: false\n    }]\n  }, {\n    questionText: \"How many Harry Potter books are there?\",\n    answerOptions: [{\n      answerText: \"1\",\n      isCorrect: false\n    }, {\n      answerText: \"4\",\n      isCorrect: false\n    }, {\n      answerText: \"6\",\n      isCorrect: false\n    }, {\n      answerText: \"7\",\n      isCorrect: true\n    }]\n  }];\n  const [currentQuestion, setCurrentQuestion] = useState(0);\n  const [showScore, setShowScore] = useState(false);\n  const [score, setScore] = useState(0);\n  const [isDone, setIsDone] = useState(false);\n  const [name, setName] = useState(\"\");\n\n  const handleAnswerOptionClick = isCorrect => {\n    if (isCorrect) {\n      setScore(score + 1);\n    }\n\n    const nextQuestion = currentQuestion + 1;\n\n    if (nextQuestion < questions.length) {\n      setCurrentQuestion(nextQuestion);\n    } else {\n      setShowScore(true);\n    }\n  };\n\n  const questionsComp = /*#__PURE__*/React.createElement(\"div\", {\n    className: \"app\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 5\n    }\n  }, showScore ? /*#__PURE__*/React.createElement(\"div\", {\n    className: \"score-section\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 9\n    }\n  }, \"Hi \", name, \", you scored \", score, \" out of \", questions.length) : /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"question-section\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"question-count\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 15\n    }\n  }, \"Question \", currentQuestion + 1), \"/\", questions.length), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"question-text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 13\n    }\n  }, questions[currentQuestion].questionText)), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"answer-section\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 11\n    }\n  }, questions[currentQuestion].answerOptions.map(answerOption => /*#__PURE__*/React.createElement(\"button\", {\n    onClick: () => handleAnswerOptionClick(answerOption.isCorrect),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 15\n    }\n  }, answerOption.answerText)))));\n  return /*#__PURE__*/React.createElement(React.Fragment, null, isDone ? questionsComp : /*#__PURE__*/React.createElement(AvatarPicker, {\n    setIsDone: setIsDone,\n    setName: setName,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 9\n    }\n  }));\n}","map":{"version":3,"sources":["/Users/kristoffersmedlund/dev/hanna/quiz-app/final/src/App.js"],"names":["React","useState","AvatarPicker","App","questions","questionText","answerOptions","answerText","isCorrect","currentQuestion","setCurrentQuestion","showScore","setShowScore","score","setScore","isDone","setIsDone","name","setName","handleAnswerOptionClick","nextQuestion","length","questionsComp","map","answerOption"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport AvatarPicker from \"./AvatarPicker\";\n\nexport default function App() {\n  const questions = [\n    {\n      questionText: \"När får man vistas på ett skjutfält\",\n      answerOptions: [\n        {\n          answerText: \"När du blivit godkänd av verkställande officer\",\n          isCorrect: false,\n        },\n        { answerText: \"När övning ej pågär\", isCorrect: true },\n        { answerText: \"Aldrig\", isCorrect: false },\n      ],\n    },\n    {\n      questionText: \"Who is CEO of Tesla?\",\n      answerOptions: [\n        { answerText: \"Jeff Bezos\", isCorrect: false },\n        { answerText: \"Elon Musk\", isCorrect: true },\n        { answerText: \"Bill Gates\", isCorrect: false },\n        { answerText: \"Tony Stark\", isCorrect: false },\n      ],\n    },\n    {\n      questionText:\n        \"Vad händer om du bryter mot ett tillträdelseförbud på ett skjutfält?\",\n      answerOptions: [\n        {\n          answerText: \"Innebär livsfara och omhändertagande samt polisanmälan\",\n          isCorrect: true,\n        },\n        { answerText: \"Du får böta 10 000 SEK\", isCorrect: false },\n        {\n          answerText: \"Du får aldrig besöka närområdet igen\",\n          isCorrect: false,\n        },\n      ],\n    },\n    {\n      questionText: \"How many Harry Potter books are there?\",\n      answerOptions: [\n        { answerText: \"1\", isCorrect: false },\n        { answerText: \"4\", isCorrect: false },\n        { answerText: \"6\", isCorrect: false },\n        { answerText: \"7\", isCorrect: true },\n      ],\n    },\n  ];\n\n  const [currentQuestion, setCurrentQuestion] = useState(0);\n  const [showScore, setShowScore] = useState(false);\n  const [score, setScore] = useState(0);\n  const [isDone, setIsDone] = useState(false);\n  const [name, setName] = useState(\"\");\n\n  const handleAnswerOptionClick = (isCorrect) => {\n    if (isCorrect) {\n      setScore(score + 1);\n    }\n\n    const nextQuestion = currentQuestion + 1;\n    if (nextQuestion < questions.length) {\n      setCurrentQuestion(nextQuestion);\n    } else {\n      setShowScore(true);\n    }\n  };\n\n  const questionsComp = (\n    <div className=\"app\">\n      {showScore ? (\n        <div className=\"score-section\">\n          Hi {name}, you scored {score} out of {questions.length}\n        </div>\n      ) : (\n        <>\n          <div className=\"question-section\">\n            <div className=\"question-count\">\n              <span>Question {currentQuestion + 1}</span>/{questions.length}\n            </div>\n            <div className=\"question-text\">\n              {questions[currentQuestion].questionText}\n            </div>\n          </div>\n          <div className=\"answer-section\">\n            {questions[currentQuestion].answerOptions.map((answerOption) => (\n              <button\n                onClick={() => handleAnswerOptionClick(answerOption.isCorrect)}\n              >\n                {answerOption.answerText}\n              </button>\n            ))}\n          </div>\n        </>\n      )}\n    </div>\n  );\n\n  return (\n    <>\n      {isDone ? (\n        questionsComp\n      ) : (\n        <AvatarPicker setIsDone={setIsDone} setName={setName} />\n      )}\n    </>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}